# -*- coding: utf-8 -*-
"""Capstone Project 1 - Solution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VaJmpFsxe2lcCQaC50AMzicd8hNMnFMv

<H1 > Welcome to Python Programming for Data Science: A 2-week Crash Course</H1>

<p align="center">
  <img src="https://blog.finxter.com/wp-content/uploads/2019/08/python-logo-master-v3-TM-flattened-Kopie.png">
</p>

Hello. My name is [Ridwan Salahuddeen](https://www.linkedin.com/in/ridwan-salahuddeen-b00396153/) and I shall be taking you through on this course.

<h3>Profile:</h3>
<blockquote>
<p>Ridwan Salahuddeen is Machine Learning Engineer with Access Bank Plc with oen of his most notable achievements being a loan predictive model. He has previously worked as an assistant Branch Service Head in Abuja until early 2019. Before joining the bank, he was a teacher at Happy Day International School where he made a notable digital reform - automating assessment entry and result computation. He has a first degree in Electronic and Electrical Engineering from Ladoke Akintola University of Technology in 2015.</p>
</blockquote>
      

### Prologue:
This initiative came to fore as a result of the Covid 19 pandemic that has left most people out of work and unable to move around. So, I thought that this could be a great opportunity for people to learn new skills in preparation for the likely aftermath of this pandemic when it finally ends.

## Table of Contents

<font >
<ol>
<li> <a href = "https://colab.research.google.com/drive/1TX0_ias1kMIJ1r3T-ST4e0G-Z4548iZI">Introduction to Programming - History </a>
<li> <a href = "https://colab.research.google.com/drive/1TX0_ias1kMIJ1r3T-ST4e0G-Z4548iZI">Development Environment - Setup </a>
      <ul>
      <li> Python Installation and IDE
      <li> Jupyter Notebook and Anaconda Distribution Installation
      <li> Google Collaboratory
      </ul>
<li> <a href = "https://colab.research.google.com/drive/1cTdtqcGxYcWIM04tSPmNWgDJJusfJNb3">Using Python as a Calculator </a>
<li> <a href = "https://colab.research.google.com/drive/1aQrYLNH3tC7338tT26rm5c2NVaQe7oIw">For and While Loops </a>
<li> <a href = "https://colab.research.google.com/drive/1_xsOc570xSQ-4d29vAdYq8X0wt5zCBp9">If , Break, Pass and Continue Statements</a>
<li> Built-in Functions and Defining Functions and Recursion
<li> Data Structures
<li> Input/Output Operations - Handling Text Files
<li> Errors and Exceptions
<li> Modules
</ol>
</font>

# CAPSTONE 1

Scenario: Happy Day International School has over the years, made excellent efforts at digitalizing it's activities. One of such efforts yielded the development whereby students' tests and exam performances are recorded in excel through a simple interface provided for the teachers. The challenge however, is that computing score totals and grades have proven tedious and sometimes inaccurate due to the deficiency of the teachers.

You have been contracted as a programmer to solve this problem. You are required to write a program that:

1. accepts a list of names of students;
2. accepts a list of subjects;
3. accepts a list of list of test scores for each subject for each student;
4. accepts a list of list of exam scores for each subject for each student;
5. computes the total of test and exam, and grades it using the scale defined below;
6. computes the total and average performance of each student;
7. returns the summary of each student's performance as a report
8. returns the summary of the class' performance at the end.


Write a function that grades students' scores using the scale below:

* 70 - 100 (inclusive): A

* 60 - 69 (inclusive): B

* 50 - 59 (inclusive): C

*  40 - 49 (inclusive): D

* 0 - 39 (inclusive): F


Sample inputs:
```
* students' names: ['Aliyu Komolafe', 'Nonsa Chidi']
* list of subjects: ['Mathematics', 'English']
* test scores: [[16, 24], [23, 20]] 
* exam scores: [[48, 56], [61, 59]]
```
> In both test and exam scores lists, each sublist is a list of mathematics and english scores for each student. For example, 16 and 24 in test scores list are the mathematics and english scores for Aliyu Komolafe.

Sample output:
```
Aliyu Komolafe
Mathematics: 64
English: 80
Total Score: 144 / 200
Average: 72.00
```


**Note:** Assume total obtainable score for each subject is 100

> The project gives an opportunity to define and use functions.
I have started most of the functions, you only need to complete the code

> It is important to break down the tasks into separate functions rather
than trying to execute everything in a single block of code


Example inputs and outputs are given below.
```
Input: 56

Output: "C"
```
"""

def grader(score):
  if score >= 70:
    return "A"
  if score >= 60:
    return "B"
  if score >= 50:
    return "C"
  if score >= 40:
    return "D"
  if score < 40:
    return "F"



def total(test_scores, exam_scores):
  '''
  The output will be a list of lists of subject scores of each student
  e.g., [[64, 70], [84, 79]] for the example above. The list is of each
  student and the sublist is of each subject
  '''
  # Create a list of total scores of each student
  stud_total_scores = []
  for stud_tests, stud_exams in zip(test_scores, exam_scores):

    # Create a list of total scores for each subject
    subject_totals = []
    for sub_test, sub_exam in zip(stud_tests, stud_exams):

      # Append the sum of test and exam scores to subject totals
      subject_totals.append(sub_test + sub_exam)

    # Append the subject totals for each student to the stud_total_scores variable.
    stud_total_scores.append(subject_totals)

  return stud_total_scores



def stud_scores(subjects, total_scores):

  # Create an empty list of stud_scores
  stud_scores = []

  # Loop through the list of scores of each student and zip it with the subjects list
  # e.g: zip ['Mathematics', 'English'] and [64, 80]; zip ['Mathematics', 'English'] and [84, 79]
  for sub_scores in total_scores:

    # Zip each subject score with subjects list to match them up
    sub_score = list(zip(subjects, sub_scores))
    
    # Append each zipped object to the list created above
    stud_scores.append(sub_score)
  

  return stud_scores

import sys
def pprint(names, stud_scores, file): # file argument allows us to specify the file we want out output written to
  
  # Create a variable for total calss average that gets update with the average score of each student at the loop below executes
  class_average_sum = 0

  # Loop through names and student scores in order to get the scores of all the subjects for each student
  for name, sub_scores in zip(names, stud_scores):
    
    # Create a variable that averages the student's performance
    stud_scores_sum = 0

    # Print the student's name
    print(name)

    # Print the headings and format it with appropriate spacing
    print(f'{"Subject":>20}:  |{"Score":<6}  |{"Grade"}')
    print("_" * 40) # Just a dash line

    # Loop through each (subject, score) tuple pair in the list sub_scores and print each subject and corresponding score.
    for subject, score in sub_scores:

      # Print and format the subjects, score and grade of each subject
      print(f'{subject:>20}:  |{score:<6}  |{grader(score)}')

      # Adding each subject's score to the stud_average variable
      stud_scores_sum += score
    # Calculate the mean score
    average = stud_scores_sum/ len(sub_scores)
    print()
    print(f'{"Average":>20}:  |{average:<6}  |{grader(average)}')
    print("\n", "+" * 40, end = '\n'*2)

    # Add average of each student to the class_average_sum
    class_average_sum += average
  
  # Calculate the class mean
  class_average = class_average_sum/len(names)
  print(f'{"Average Class":>20}\n{"Performance:":>20}  |{class_average: <6}   |{grader(class_average)}')




def process_result(names, subjects, tests, exams, file = sys.stdout):
  # Get total scores of tests and exams
  total_scores = total(test_scores, exam_scores)

  # Get a mapping of subjects to total scores
  student_scores = stud_scores(subjects, total_scores)

  # Print out a formatted ouput of report
  pprint(names, student_scores, file)


